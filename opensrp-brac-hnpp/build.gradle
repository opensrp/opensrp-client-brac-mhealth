apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'io.fabric'

buildscript {
    repositories {
        google()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.2'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
        classpath 'io.fabric.tools:gradle:1.30.0'
    }
}

android {
    useLibrary 'org.apache.http.legacy'
    compileSdkVersion 29
    buildToolsVersion androidBuildToolsVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.md'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude("META-INF/*.kotlin_module")
    }

    defaultConfig {
        applicationId "org.smartregister.brac.hnpp"
        minSdkVersion 18
        targetSdkVersion 29
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true


        buildConfigField "String", "SIMPRINT_PROJECT_ID_TRAINING",'"pcmqBbcaB4xWvfRHRELG"'
        buildConfigField "String", "SIMPRINT_PROJECT_ID_RELEASE",'"pcmqBbcaB4xWvfRHRELG"'
        buildConfigField "String[]", "ALLOWED_LOCATION_LEVELS", '{"MOH Jhpiego Facility Name" , "Village"}'
        buildConfigField "String", 'DEFAULT_LOCATION', '"Village"'
        buildConfigField "boolean", 'SUPPORT_QR', 'false'
        buildConfigField "int", "DATABASE_VERSION", '33'
        buildConfigField "int", "DATA_SYNC_DURATION_MINUTES", '10'
        buildConfigField "long", "MAX_SERVER_TIME_DIFFERENCE", "1800000l"
        buildConfigField "boolean", "TIME_CHECK", "false"
        buildConfigField "String", "SYNC_TYPE", '"teamId"'
        buildConfigField "int", "MAX_SYNC_RETRIES", '3'
        buildConfigField "long", "BUILD_TIMESTAMP", System.currentTimeMillis() + "L"
        buildConfigField "boolean", "IS_SYNC_SETTINGS", "false"
        buildConfigField "int", "NOTIFICATION_GENERATE", '360'
        if (project.rootProject.file("local.properties").exists()) {
            Properties properties = new Properties()
            properties.load(project.rootProject.file("local.properties").newDataInputStream())

            if (properties != null && properties.containsKey("oauth.client.id")) {
                buildConfigField "String", "OAUTH_CLIENT_ID", properties["oauth.client.id"]
            } else {
                project.logger.error("oauth.client.id variable is not set in your local.properties")
            }

            if (properties != null && properties.containsKey("oauth.client.secret")) {
                buildConfigField "String", "OAUTH_CLIENT_SECRET", properties["oauth.client.secret"]
            } else {
                project.logger.error("oauth.client.secret variable is not set in your local.properties")
            }

            // Mapbox access token
            if (properties != null && properties.containsKey("mapbox.sdk.token")) {
                buildConfigField "String", "MAPBOX_SDK_ACCESS_TOKEN", properties["mapbox.sdk.token"]
            } else {
                project.logger.error("oauth.client.secret variable is not set in your local.properties")
            }
        } else {
            println("local.properties does not exist")
            buildConfigField "String", "OAUTH_CLIENT_ID", "\"oauth\""
            buildConfigField "String", "OAUTH_CLIENT_SECRET", "\"sample\""
        }
    }

    buildTypes {
        release {
            //keystore pass mhealth2019
            minifyEnabled false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_INITIAL_BATCH_SIZE", '250'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_BATCH_SIZE", '100'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_SOURCE", '1'
            buildConfigField "boolean", "TIME_CHECK", "true"
            buildConfigField "int", "DATA_SYNC_DURATION_MINUTES", '90'
            buildConfigField "int", "VACCINE_SYNC_PROCESSING_MINUTES", '30'
            buildConfigField "int", "IMAGE_UPLOAD_MINUTES", '180'
            buildConfigField "int", "PULL_UNIQUE_IDS_MINUTES", '180'
            buildConfigField "int", "PULL_SSLOCATION", '180'
            buildConfigField "int", "REPORT_INDICATOR_GENERATION_MINUTES", '15'
            buildConfigField "int", "HOME_VISIT_MINUTES", '60'
//            buildConfigField "String", 'opensrp_url_live', '"https://mhealth.brac.net/opensrp/"'
//            buildConfigField "String", 'opensrp_url_training', '"http://mhealthtest.brac.net:8080/opensrp/"'
        }

        debug {

            buildConfigField "int", "OPENMRS_UNIQUE_ID_INITIAL_BATCH_SIZE", '250'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_BATCH_SIZE", '15'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_SOURCE", '2'
            buildConfigField "boolean", "TIME_CHECK", "false"
            buildConfigField "int", "DATA_SYNC_DURATION_MINUTES", '15'
            buildConfigField "int", "VACCINE_SYNC_PROCESSING_MINUTES", '30'
            buildConfigField "int", "IMAGE_UPLOAD_MINUTES", '15'
            buildConfigField "int", "PULL_UNIQUE_IDS_MINUTES", '15'
            buildConfigField "int", "PULL_SSLOCATION", '180'
            buildConfigField "int", "REPORT_INDICATOR_GENERATION_MINUTES", '15'
            buildConfigField "int", "HOME_VISIT_MINUTES", '10'
            buildConfigField "String", "OAUTH_CLIENT_ID", '"brachnpp"'
            buildConfigField "String", "OAUTH_CLIENT_SECRET", '"df6c9a4e-3df9-4da6-b3b0-de5b986af146"'
            testCoverageEnabled true
        }
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
        unitTests.all {
            systemProperty 'robolectric.enabledSdks', '28'
            jvmArgs '-noverify'
        }
    }
    flavorDimensions 'baseDimension'
    productFlavors {

        training{
            versionCode 31
            versionName "3.0.6"
            dimension = 'baseDimension'
            applicationIdSuffix ".training"
            buildConfigField "boolean", 'IS_TRAINING', 'true'
            buildConfigField "String", 'opensrp_url_training', '"http://mhealthtest.brac.net:8080/opensrp/"'
            buildConfigField "String", 'opensrp_url_live', '"http://mhealthtest.brac.net:8080/opensrp/"'
        }
        normal{
            versionCode 33
            versionName "1.3.8_DEV"
            dimension = 'baseDimension'
            buildConfigField "boolean", 'IS_TRAINING', 'false'

//            buildConfigField "String", 'opensrp_url_training', '"http://hnpptest.mpower-social.com:8080/opensrp/"'
//            buildConfigField "String", 'opensrp_url_live', '"http://hnpptest.mpower-social.com:8080/opensrp/"'

            buildConfigField "String", 'opensrp_url_training', '"http://goldo.mpower-social.com/opensrp/"'
            buildConfigField "String", 'opensrp_url_live', '"http://goldo.mpower-social.com/opensrp/"'

        }
        production{
            versionCode 30
            versionName "1.3.4"
            dimension = 'baseDimension'
            buildConfigField "boolean", 'IS_TRAINING', 'false'
            buildConfigField "String", 'opensrp_url_training', '"http://mhealth.brac.net:8080/opensrp/"'
            buildConfigField "String", 'opensrp_url_live', '"http://mhealth.brac.net:8080/opensrp/"'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':opensrp-chw-core')

    implementation 'com.whiteelephant:monthandyearpicker:1.3.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.google.code.gson:gson:2.8.5'

    api('org.smartregister:opensrp-client-simprints:1.0.6-SNAPSHOT@aar') {
        transitive = true
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'org.smartregister', module: 'opensrp-client-native-form'
    }

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'org.mockito:mockito-android:2.7.22'

    testImplementation 'org.mockito:mockito-core:2.8.47'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:4.0.1'
    testImplementation 'org.robolectric:shadows-multidex:3.8'
    testImplementation 'org.robolectric:shadows-support-v4:3.4-rc2'

    // PowerMock
    def powerMockVersion = '1.7.1'
    testImplementation "org.powermock:powermock-module-junit4:$powerMockVersion"
    testImplementation "org.powermock:powermock-module-junit4-rule:$powerMockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$powerMockVersion"
    testImplementation "org.powermock:powermock-classloading-xstream:$powerMockVersion"
}


tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
    getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$ViewBinder*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ]))
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}
